services:
  db:
    image: postgres:15-alpine
    container_name: globalupc_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-globalupc}
      POSTGRES_USER: ${POSTGRES_USER:-globalupc}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-globalupc}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - globalupc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-globalupc}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: globalupc_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-globalupc}:${POSTGRES_PASSWORD:-globalupc}@db:5432/${POSTGRES_DB:-globalupc}
      PYTHONUNBUFFERED: 1
      SERVER_IP: ${SERVER_IP:-localhost}
      FRONTEND_PORT: ${FRONTEND_PORT:-8080}
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - globalupc_network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: globalupc_frontend
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    depends_on:
      - backend
    networks:
      - globalupc_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  globalupc_network:
    driver: bridge
